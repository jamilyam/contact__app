{"version":3,"sources":["ContactApp/ContactItem.js","ContactApp/ContactList.js","ContactApp/ContactForm.js","ContactApp/ContactBook.js","App.js","serviceWorker.js","index.js"],"names":["ContactItem","props","useState","item","name","setName","lastName","setLast","number","setNumber","isEdit","setEdit","handleLastNameInput","e","target","value","handNumberInput","className","onClick","stopPropagation","onSubmit","preventDefault","editContact","onChange","type","required","removeContact","id","ContactList","contacts","map","key","ContactForm","state","handleSubmit","contact","Date","now","setState","handleInputName","text","handleInputLast","handleInputNumber","this","placeholder","Component","ContactBook","addContact","push","index","findIndex","filter","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a67704f1.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nfunction ContactItem(props) {\n  const [name, setName] = useState(props.item.name);\n  const [lastName, setLast] = useState(props.item.lastName);\n  const [number, setNumber]=useState(props.item.number);\n  const [isEdit, setEdit] = useState(false);\n \n  const handleDelete = (e) => {\n    e.stopPropagation();\n    props.removeContact(props.item.id)\n  }\n  const handleEditClick = (e) => {\n    e.stopPropagation();\n    setEdit(!isEdit)\n  }\n  const handleEditSubmit = (e) => {\n    e.preventDefault();\n    props.editContact({\n      ...props.item,\n      name,\n      lastName,\n      number\n    })\n    setEdit(false)\n  }\n  const handleEditInput = (e) => {\n    setName(e.target.value);\n  }\n  const handleLastNameInput=(e)=>{\n    setLast(e.target.value);\n  }\n  const handNumberInput = (e) => {\n    setNumber(e.target.value);\n  }\n\n  return (\n    <div className=\"contactItem\">\n      <div>\n        {isEdit ? (\n          <form \n            className = \"edit-form\"\n            onClick = {e => e.stopPropagation()}\n            onSubmit = {handleEditSubmit}>\n            <input \n              className=\"edit-inp\"\n              onChange={handleEditInput}\n              value={name} \n              type=\"text\" \n              required\n            />\n            <input \n              className=\"edit-inp\"\n              onChange={handleLastNameInput}\n              value={lastName} \n              type=\"text\" \n              required\n            />\n            <input \n              className=\"edit-inp\"\n              onChange={handNumberInput}\n              value={number} \n              type=\"text\" \n              required\n            />\n            <div>\n              <button \n                className=\"edit-form-btn\" \n                type=\"submit\"\n              >Submit</button>\n              <button \n                className=\"edit-form-btn\"\n                onClick={()=>setEdit(false)} \n                type=\"submit\"\n              >Cancel</button>\n            </div>\n          </form>\n        ) : (\n          <div>\n            <input value={props.item.name} onChange={handleLastNameInput}/>\n            <input value={props.item.lastName} onChange={handleLastNameInput}/>\n            <input value={props.item.number} onChange={handNumberInput}/>\n          </div>\n        )\n        }\n          </div>\n          <div>\n            <button \n              className=\"btn-edit todo-item__btn\"\n              onClick={handleEditClick}\n              >&#x270E;</button>\n            <button \n              className=\"btn-del todo-item__btn\"\n              onClick={handleDelete}\n            >&#x2716;</button>\n          </div>\n    </div>\n  )\n}\nexport default ContactItem;\n","import React from 'react';\nimport ContactItem from './ContactItem';\n\nfunction ContactList(props){\n  return(\n    <div>\n      {props.contacts.map((item)=>{\n        return(\n          <ContactItem \n            item={item}\n            key={item.id}\n            editContact={props.editContact}\n            removeContact={props.removeContact}\n          />\n        ) \n      })}\n    </div>\n  )\n}\nexport default ContactList;\n","import React, {Component} from 'react'\n\nclass ContactForm extends Component {\n  state={\n    name:\"\",\n    lastName:\"\",\n    number:\"\"\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const contact = {\n      id: Date.now(),\n      name: this.state.name,\n      lastName: this.state.lastName,\n      number: this.state.number\n    };\n    this.props.onSubmit(contact);\n    this.setState({\n      name: \"\",\n      lastName: \"\",\n      number: \"\"\n    })\n  }\n  handleInputName = (e) => {\n    const text = e.target.value;\n    this.setState({\n      name: text\n    })\n  }\n  handleInputLast=(e)=>{\n    const text = e.target.value;\n    this.setState({\n      lastName: text\n    })\n  }\n  handleInputNumber = (e) => {\n    const text = e.target.value;\n    this.setState({\n      number: text\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <form \n          onSubmit={this.handleSubmit}>\n          <input \n            onChange={this.handleInputName} \n            value={this.state.name} \n            type=\"text\" required\n            placeholder=\"name\"/>\n          <input \n            onChange={this.handleInputLast} \n            value={this.state.lastName} \n            type=\"text\" required\n            placeholder = \"lastName\"/>\n          <input \n            onChange={this.handleInputNumber} \n            value={this.state.number} \n            type=\"text\" required\n            placeholder = \"number\"/>\n          <div>\n            <button \n              type = \"submit\"\n            >Submit</button> \n            <button\n              type = \"reset\"\n            >Cancel</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\nexport default ContactForm;\n","import React from 'react';\nimport ContactList from './ContactList';\nimport ContactForm from './ContactForm';\n\nclass ContactBook extends React.Component {\n  state= {\n    contacts:[\n      {\n        id: 1,\n        name: \"Jack\",\n        lastName: \"Smith\",\n        number: 777987\n      }, {\n        id: 2,\n        name: \"John\",\n        lastName: \"Peters\",\n        number: 7723475\n      }, {\n        id: 3,\n        name: \"Joana\",\n        lastName: \"Roberts\",\n        number: 7773682\n      }\n    ]}\n  \n  addContact=(contact)=>{\n    const contacts= [...this.state.contacts];\n    contacts.push(contact);\n    this.setState({contacts});\n  }\n\n  editContact=({id, name, lastName, number})=> {\n    const index = this.state.contacts.findIndex((item)=>{\n      return item.id === id;\n    });\n    const contacts= [...this.state.contacts];\n    const item = {...contacts[index]};\n    item.name = name;\n    item.lastName = lastName;\n    item.number=number;\n    contacts[index]=item;\n    this.setState({contacts})\n  }\n\n  removeContact=(id)=> {\n    const contacts = this.state.contacts.filter(contact => contact.id !== id)\n    this.setState({contacts});\n  }\n  render(){\n    return (\n      <div className = \"wrapper\">\n      <h1>Contact App</h1> \n      <ContactForm onSubmit={this.addContact}/>\n      <ContactList \n        contacts={this.state.contacts}\n        editContact={this.editContact}\n        removeContact={this.removeContact}\n      />\n      </div> \n    );\n  }\n}\n\nexport default ContactBook;\n","import React from 'react';\nimport ContactBook from './ContactApp/ContactBook'\n\nfunction App() {\n  return(\n    <div>\n      <ContactBook/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}